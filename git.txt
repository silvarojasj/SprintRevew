SISTEMA DE CONTROL DE VERSIONES 

Es una herramienta de software  que le permite a un equipo de desarrollo getionar los cambios realizados en el codigo fuente, realizando un seguimiento a los cambios realizados, permitiendo volver a una version anterior del codig  si se comete un herror.

GIT

QUE ES

es un software  gestor de versiones distribuido.

COMO FUNCION

git es una herramienta que permite  tener  una copia y el historial de las versiones del desarrollo en cada equipo de los desarrolladores, asi como en el servido.

ESTADOS DE GIT 

Archivos Tracked

son archivos que estan en el  repositorio git y no tienen cambios pendientes.

Archivos Staged

Son archivos en Staging estan en el repositorio de git y tiene cambios  pero todavia no han sido guardados definitivamente en el repositorio, solo en el disco duro.

Archivos Unstaged

git tiene registro de lo archivos, pero estan desactualizados, sus cambios solo estan en el dico duro.

Archivos Untracked

archvios que solo se encuentran en el disco y nunca ha sido agregados el repositorio local de git. 

Repositorio

Es donde se ecuentra el codigo terminado de editar cuyas

Branch

Es una rama del codigo donde puedes modificar el codigo, sin modificar el archivo original

COMANDOS BASICOS

Estos son los comandos en consola para usar git 

git version =>  me permite saber la version instalada de git en el equipo

git config --global user.name «nombre» => configura nombre del usuario de git

git config --global user.email <<email>> => configura el email de usuario de git

git config -- list => muestra las configuraciones de git

git init => crea el repositorio de git en la carpeta .git donde se almacenan los cambios 

git branch <<nombre>> crea una nueva rama

git ignore => permite a git omitir los archivos mencionados 
 
git status => nos da el estado de los archivos en la carpeta

git add => agrega archivos untraked al staging area

git commit -m <<mensaje>> agregar los archivos al reposiorio con un comentario

git log => muestra el historial de commits

git clone <<https://direccion del archivo en github>> => bajar el archvio al repositorio local

git diff   => muestra los cambios realizados en el archivo

git pull   => descargamos la version mas reciente del codigo

git push   => sube los archivos a github

git checkout <<nombre del branch>> permite cambiar la branch en la que estamos

git branch --merged => lista de branch unidos a la rama principal de codigo

git merged <<nombre de la brancha>> => unir el branch a la rama principal de codigo
 



